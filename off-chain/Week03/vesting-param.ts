
/*
Off-chain code for the parameterized validator - paramVestingVal defined in 
https://github.com/LukaKurnjek/ppp-plutusV3-plinth/blob/main/src/Week03/Vesting.hs

The following error appears when trying to claim the funds from the contract:

error: Uncaught (in promise) (FiberFailure) TxBuilderError: { Complete: "failed script 
execution Spend[0] failed to deserialise PlutusData using UnConstrData Value Con( Data( 
BoundedBytes( BoundedBytes( [ 216, 121, 159, 88, 28, ...redacted... )" }
*/

import { 
  Lucid, 
  Blockfrost,
  Address,
  SpendingValidator,
  Data, 
  AddressDetails,
  TxHash,
  UTxO
} from "@lucid-evolution/lucid";
import {
  validatorToAddress,
  getAddressDetails,
  applyParamsToScript
} from "@lucid-evolution/utils";
import { Constr } from "@lucid-evolution/plutus";
import { secretSeed } from "./seed.ts";

const lucid = await Lucid(
  new Blockfrost(
    "https://cardano-preview.blockfrost.io/api/v0", 
    "<blockfrost-key>"
  ),
  "Preview"
);

// Load local stored seed as a wallet into lucid
lucid.selectWallet.fromSeed(secretSeed);
const addr: Address = await lucid.wallet().address();

// Set the vesting deadline
const deadlineDate: Date = new Date("2025-02-05T00:00:00Z")
const deadlinePOSIX = BigInt(deadlineDate.getTime());

// Set the vesting beneficiary to our own key.
const details: AddressDetails = getAddressDetails(addr);
const beneficiaryPKH: string = details.paymentCredential?.hash!;

// Defining the vesting parameter as shown in: 
// https://github.com/spacebudz/lucid/blob/main/examples/typed_data.ts
// ----------------------------------------------------
// Create vesting type schema 
const vestingParamSchema = Data.Object({
  beneficiaryParam: Data.Bytes(),
  deadlineParam: Data.Integer(),
});
type VestingParamType = Data.Static<typeof vestingParamSchema>;
const vestingParamType = vestingParamSchema as unknown as VestingParamType;

// Creating a vesting parameter with a beneficiary and deadline
const VestingParam: VestingParamType = {
  beneficiaryParam: beneficiaryPKH, 
  deadlineParam: deadlinePOSIX
};

// Vesting parameter serialized to Data type 
const vestingParamAsData = Data.to<VestingParamType>(VestingParam,vestingParamType);
// ----------------------------------------------------

// Alternative way of creating the vesting parameter as shown in Complex type section in 
// https://github.com/Anastasia-Labs/lucid-evolution/blob/main/docs/pages/documentation/deep-dives/smart-contract-interactions.mdx
const vestData = Data.to(new Constr(0, [beneficiaryPKH, deadlinePOSIX]));

// Defining the spending script 
// NOTE: Applying vestData instead of vestingParamAsData gives the same validator address
const vestingScript: SpendingValidator = {
  type: "PlutusV3",
  script: applyParamsToScript(
    "590e380101003232323232323232323232323232225932329002919191919191194804c88a400e44444444444444446464b2b3202b2222222222222222302800846001180122b20031800460048c008b2600201518004564c00405630028c80ac8a403244a65266603a065200b22590018801456400a43001330230340014400a20042400e44b200310028ac8014860026604606800288014400845400630028a8008564ccc0700c6400644b200310028ac801486002660420660028801440084801c8964006200515900290c004cc0840cc0051002880108c00230028c00005200322900291299194801c56401242600400b132801280144c0040111590049098014004cc0880cc005132801280144c00600812994a801c85400a30008a800856400642b2a00721593330210350020018c00a30008c009168c009168aca801486001168c00819003912c800c400a2b20052180099810819800a2005100201001800c00400580030018026000180b912c800c600522155333573466e3c0240084600022600800222253232900490a801456400e430048c00230044540042b20052150028c00a2a00215900290ac801484ccc0180140080062d180222d15900190c00a2d18000520032222222200714800c888888014520032222220060c8c8c954ccd5cd19b874800000844c8c8c8c8ca002646464aa666ae68cdc3a4000004226464646464646464646464646464646466666666666646664664664444444444444445001010807c03a01b00c805c02a013008803c01a00b004801c00a00230013574202860026ae8404cc09c8c8c8c954ccd5cd19b874800000846002603a6ae84006600a6ae84d5d1000844c0b92401035054310035573c0046aae74004dd5000998138009aba1011232323255333573466e1d20000021132328009919192a999ab9a3370e900000108c004c0c0d5d0800ccc0c48c8c8c954ccd5cd19b87480000084600260686ae8400422aa666ae68cdc3a40040042265003375a6ae8400a6eb4d5d0800cdd69aba1357440023574400222606c9201035054310035573c0046aae74004dd50009aba135744002113032491035054310035573c0046aae74004dd51aba100398039aba10029919192a999ab9a3370e900000108c0004554ccd5cd19b87480080084600a6eb8d5d080084554ccd5cd19b8748010008460066ae840042260649201035054310035573c0046aae74004dd51aba1001998173ae357426ae880046ae88004d5d1000889816a49035054310035573c0046aae74004dd50009bad3574201e60026ae84038c004c005d69981280a9aba100c33302902675a6ae8402cc8c8c954ccd5cd19b874800000846002646464aa666ae68cdc3a4000004230013302975a6ae8400660506ae84d5d1000844c0b9241035054310035573c0046aae74004dd51aba10019919192a999ab9a3370e900000108c004cc0a5d69aba100198141aba13574400211302e4901035054310035573c0046aae74004dd51aba13574400211302b4901035054310035573c0046aae74004dd51aba100a3302575c6ae84024ccc0a48c8c8c954ccd5cd19b8748000008460066eb8d5d080084554ccd5cd19b87480080084601260366ae8400422aa666ae68cdc3a400800423007302a357420021155333573466e1d2006002118009bad357420033019357426ae8800422aa666ae68cdc3a40100042300b301a357420021155333573466e1d200a002118029bad357420033018357426ae880042260589201035054310035573c0046aae74004dd50008109aba1008330010213574200e6eb8d5d080319981480b1981481211919192a999ab9a3370e900000108c0084554ccd5cd19b87480080084600822aa666ae68cdc3a40080042300011302c491035054310035573c0046aae74004dd50009aba1005330250143574200860046ae8400cc008d5d09aba2003302875c604aeb4d5d10009aba2001357440026ae88004d5d10009aba2001357440026ae88004d5d10009aba2001357440026ae88004d5d10009aba20011130184901035054310035573c0046aae74004dd51aba10069aba10059919192a999ab9a3370e900000108c00cdd71aba100108aa999ab9a3370e900100108c024c01cd5d0800ccc05c044d5d09aba200108aa999ab9a3370e900200108c01cc058d5d080084554ccd5cd19b8748018008460026eb4d5d0800cc014d5d09aba200108aa999ab9a3370e900400108c02cc018d5d080084554ccd5cd19b87480280084600a6eb4d5d0800cc010d5d09aba200108980c2481035054310035573c0046aae74004dd51aba13574400a232323255333573466e1d200000211328009bad3574200530173574200332323255333573466e1d200000211328049980e00c9aba10029aba10019980e3ae357426ae880046ae880044554ccd5cd19b874800800846002660360306ae84006646464aa666ae68cdc3a400000423001375a6ae840066eb4d5d09aba200108980fa481035054310035573c0046aae74004dd51aba1357440021155333573466e1d20040021180599980e80d3ad357420033301b75c6ae84d5d100084554ccd5cd19b87480180084600e660360306ae8400422aa666ae68cdc3a401000422646500d3301d01a357420073301b01c3574200533301f01c75a6ae840072646464aa666ae68cdc3a400000423001375a6ae840066eb4d5d09aba2001089810a481035054310035573c0046aae74004dd51aba13574400322330170020010d5d10009aba20011155333573466e1d200a002118029980d80c1aba10019919192a999ab9a3370e9000001089980f3ae3574200222603e9201035054310035573c0046aae74004dd51aba1357440021155333573466e1d200c0021180108980e2481035054310035573c0046aae74004dd51aba135744002357440022260309201035054310035573c0046aae74004dd500091919192a999ab9a3370e900000108c034c054d5d0800ccc059d69aba1357440021155333573466e1d200200211809980a9aba10019980b3ad357426ae8800422a64a666ae68cdc3a4008006230033016357420053001357426ae8800822aa666ae68cdc3a400c006226500b301735742007300235742003375a6ae84d5d10008d5d100108aa999ab9a3370e900400188c024c058d5d08014dd69aba1357440041155333573466e1d200a0031180a980b1aba100208aa999ab9a3370e900600188c044c058d5d08014dd69aba1357440041155333573466e1d200e003118029bae35742005375c6ae84d5d100104554ccd5cd19b874804000c4600e6eb8d5d08014dd69aba1357440041155333573466e1d201200311800980b1aba1002980b1aba1357440041155333573466e1d201400311807980b1aba100208980c24810350543100232323255333573466e1d2000002118009bae35742002115325333573466e1d20020031180298009aba100208aa999ab9a3370e900200188c00cdd71aba100298009aba13574400411301c49010350543100232323255333573466e1d200000211800980e9aba100108aa999ab9a3370e900100108c0084554ccd5cd19b87480100084600822603e9201035054310035573c0046aae74004dd50009aab9e00235573a0026ea8004d55cf0011aab9d00137540024646464aa666ae68cdc3a4000004230013014357420021155333573466e1d200200211801980a1aba100108aa999ab9a3370e900200108c014dd71aba100108980b2481035054310035573c0046aae74004dd500091919192a999ab9a3370e900000108c004dd71aba10019bad357426ae8800422602a9201035054310035573c0046aae74004dd50009aba20011130104901035054310035573c0046aae74004dd50011919192a999ab9a3370e900000108c004dd71aba10019bad357426ae8800422601e921035054310035573c0046aae74004dd5001452689806249035054350018069112a999ab9a3370e9000000889806248103505433001155333573466e200052000113300333702900000119b814800000444ca00266e1000c00666e10008004660080040026018444aa666ae68cdc3a400000222004226600600266e1800800480048c8c8c954ccd5cd19b87480000084600422aa666ae68cdc3a40040042300011300a4901035054310035573c0046aae74004dd5000911919192a999ab9a3370e900000108c0084554ccd5cd19b874800800846002600a6ae8400422aa666ae68cdc3a40080042300411300a491035054310035573c0046aae74004dd500091919192a999ab9a3370e900000108c004dd71aba10019bad357426ae880042260109201035054310035573c0046aae74004dd5000919118011bac00130082233335573e0025000280198021aba100298019aba200240008c8c8c954ccd5cd19b8748000008460026eb8d5d080084554ccd5cd19b8748008008460066eb8d5d0800844c0192401035054310035573c0046aae74004dd5000911919192a999ab9a3370e900100108c0084554ccd5cd19b874800000846002600a6ae8400422600c921035054310035573c0046aae74004dd5000919319ab9c0018001119118011bab00130052233335573e0025000232801c004c018d55ce800cc014d55cf000a60086ae8800c6ae8400a0010012337009001000c8cdc0800a400520019000cc00888954ccd5cd19b89002001118018014cc00ccdc024004004002118004888c8c8c954ccd5cd19b880034800044c00801844c004018c01c8954ccd5cd19b8900100511801800cc008cdc0000802046000600c44aa666ae68cdc400080208c000460060033002337000020063370200400680091199ab9a3370e00400300080148954ccd5cd19b870020011180008aa999ab9a337120040022300411801488ccd5cd19b88002001800400a44666ae68cdc4801000c00200522333573466e2400800600500091199ab9a3371000400300280048954ccd5cd19b890020011100111002912a999ab9a33712004002220042200223230010012300223300200200101",
    [vestingParamAsData]
  )
};
const vestingAddress = validatorToAddress("Preview", vestingScript);

// Function that sends an amount of lovelace to the vesting script 
async function vestFunds(amount: bigint): Promise<TxHash> {
  const tx = await lucid
    .newTx()
    .pay.ToContract(vestingAddress, { kind: "inline", value: Data.void() }, { lovelace: amount })
    .complete();

  const signedTx = await tx.sign.withWallet().complete();
  const txHash = await signedTx.submit();
  return txHash
}

// Function for claiming vested funds from script 
async function claimVestedFunds(): Promise<TxHash> {
  const vestedUTxO: UTxO[] = await lucid.utxosAt(vestingAddress);

  if (vestedUTxO && vestedUTxO.length > 0) {
    const tx = await lucid
      .newTx()
      .collectFrom(vestedUTxO, Data.void()) //we use void for redeemer
      .addSignerKey(beneficiaryPKH)
      .attach.SpendingValidator(vestingScript)
      .validFrom(Date.now()-30*1000) // 30 sec before now
      .complete();

    const signedTx = await tx.sign.withWallet().complete();
    const txHash = await signedTx.submit();
    return txHash
  }
  else return "No UTxO's found that can be claimed"
}

// Function calls 
//console.log(vestingAddress);
//console.log(await vestFunds(5_000_000n));
//console.log(await deployVestingScript());
//console.log(await claimVestedFunds());

